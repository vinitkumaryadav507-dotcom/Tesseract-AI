/**
 * @fileoverview Firestore Security Rules for the AI Chatbot application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and chat sessions.
 * All data is nested under /users/{userId}, ensuring that only the authenticated user can
 * access their own data. Authorization Independence is maintained by avoiding `get()` calls
 * and relying on path-based ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/chat_sessions/{chatSessionId}: Stores chat sessions for each user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The rules explicitly deny all permissions that are not specifically granted.
 * - Data validation is relaxed in favor of rapid prototyping, but ownership is strictly enforced.
 *
 * Denormalization for Authorization:
 * The `userId` is implicitly denormalized onto each chat session document through the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level access restrictions. No direct operations allowed at the root.
     * @path /
     * @allow (get) N/A - No documents at the root.
     * @deny (create, update, delete, list) All operations are denied at the root.
     * @principle Prevents accidental writes or reads at the database root.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) If the user ID in the path matches the authenticated user's ID (self-creation).
     * @allow (get, update, delete) If the user ID in the path matches the authenticated user's ID (ownership).
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // isOwner() checks if the request.auth.uid matches the userId
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isSelfCreation(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/chat_sessions/{chatSessionId} subcollection.
     * @path /users/{userId}/chat_sessions/{chatSessionId}
     * @allow (create, get, update, delete, list) If the user ID in the path matches the authenticated user's ID (ownership).
     * @principle Enforces document ownership for chat sessions within a user's profile.
     */
    match /users/{userId}/chat_sessions/{chatSessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource based on the path.
     * @param {string} userId The user ID from the path.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is creating their own user document.
     * @param {string} userId The user ID from the path.
     * @return {boolean} True if the user is creating their own document, false otherwise.
     */
    function isSelfCreation(userId) {
        return request.auth.uid == userId;
    }

     /**
      * @description Combines ownership check with document existence check.
      * @param {string} userId The user ID from the path.
      * @return {boolean} True if the user is the owner and the document exists.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}